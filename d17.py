from copy import deepcopy
from pprint import pprint as pp

def calc(a):
    regA = a
    regB = 0
    regC = 0
    out = []
    while regA > 0:
        regB = regA % 8
        regB = regB ^ 5
        regC = regA >> regB
        regA = regA >> 3
        regB = regB ^ regC
        regB = regB ^ 6
        out.append(regB % 8)
    return out

a_to_out = {}
for i in range(1,2**10-1):
    out = calc(i)
    a_to_out[i] = out[0]

poss_a_for_out = {k:[] for k in range(8)}
map_to_bits = {k:[] for k in range(8)}
for k,v in a_to_out.items():
    poss_a_for_out[v].append(k)
    map_to_bits[v].append( "%010d" % int(bin(k).replace("0b","")) )
pp(map_to_bits)

#map_to_bits = {0: ['0000011', '0001011', '0010011', '0011011', '0100001', '0100011', '0101001', '0101011', '0101110', '0110011', '0111011', '1100000', '1101000', '1101110', '1110000', '1111000'], 1: ['0000010', '0001010', '0001100', '0010010', '0010111', '0011010', '0011100', '0100010', '0100110', '0101010', '0101100', '0110001', '0110010', '0110111', '0111001', '0111010', '0111100', '1000000', '1000010', '1000011', '1001000', '1001010', '1001011', '1001100', '1010000', '1010010', '1010011', '1010111', '1011000', '1011010', '1011011', '1011100', '1100010', '1100011', '1100110', '1101010', '1101011', '1101100', '1110010', '1110011', '1110111', '1111010', '1111011', '1111100'], 2: ['0000001', '0001001', '0100000', '0101000', '0110000', '0111000', '0111110', '1111110'], 3: ['0000101', '0001000', '0001101', '0010000', '0010001', '0010101', '0011000', '0011001', '0011101', '0011111', '0100101', '0101101', '0110101', '0110110', '0111101', '0111111', '1000101', '1001101', '1010101', '1011101', '1011111', '1100101', '1101101', '1110101', '1110110', '1111101'], 4: ['0001110', '1001110', '1100001', '1101001'], 5: ['0000100', '0000110', '0000111', '0010100', '0100100', '0100111', '0110100', '1000100', '1000110', '1000111', '1010100', '1100100', '1100111', '1110001', '1110100', '1111001'], 6: ['0011110', '1000001', '1001001', '1011110'], 7: ['0001111', '0010110', '0101111', '1001111', '1010001', '1010110', '1011001', '1101111']}
needed_start =[0, 3, 5, 5, 6, 1, 0, 4, 3, 0, 5, 7, 5, 1, 4, 2]
sofar_start = ("0"*10) +"000011" # only bits for the first 0 that make sense



def find_options(sofar, needed):
    last7 = sofar[-7:]
    next_needed = needed[0]
    prefix = "  " * (len(needed_start)-len(needed))
    print(f"{prefix}sofar:'{sofar}', last7:{last7}, next_needed:{next_needed}")
    options = []
    for bit_option in map_to_bits[next_needed]:
        print(f"{prefix}Testing {next_needed}->{bit_option}...")
        if bit_option.startswith(last7): #could work!
            print(f"{prefix}Could use {bit_option} for {next_needed}")
            opt = [ (bit_option, oct(int(bit_option[-3:],2)).replace("0o",""), next_needed) ]
            if len(needed) <= 1:
                print(f"{prefix}Adding option {opt} at tail")
                options.append(opt)
            else:
                next_set = find_options(sofar[:-4]+bit_option, deepcopy(needed[1:]))
                for ns in next_set:
                    full_opt = opt+ns
                    print(f"{prefix}Adding option {opt}+{ns} = {full_opt}")
                    options.append(full_opt)
    print(f"{prefix}Returning {options} from find_options({sofar},{needed})...")
    return options




res = find_options(sofar_start, deepcopy(needed_start[1:]))
print(res)
nums = []
for r in res:
    pp(r)
    numstr = "0o3"
    for (bits,digit,next_needed) in r:
        numstr = numstr + digit
    nums.append(numstr)
for n in sorted(nums):
    print(n)

opts=[0o3062342312204233,
0o3062342312204632,
0o3062342312207401,
0o3062342312207411,
0o3062342312264632,
0o3062342352304632,
0o3062342352307401,
0o3062342352307411,
0o3062342356104632,
0o3062342356107401,
0o3062342356107411,
0o3062342356171411,
0o3062342356304632,
0o3062342356307401,
0o3062342356307411,
0o3062342372004233,
0o3062342372004632,
0o3062342372007401,
0o3062342372007411,
0o3064342312204233,
0o3064342312204632,
0o3064342312207401,
0o3064342312207411,
0o3064342312264632,
0o3064342352304632,
0o3064342352307401,
0o3064342352307411,
0o3064342356104632,
0o3064342356107401,
0o3064342356107411,
0o3064342356171411,
0o3064342356304632,
0o3064342356307401,
0o3064342356307411,
0o3064342372004233,
0o3064342372004632,
0o3064342372007401,
0o3064342372007411,
0o3710140302204233,
0o3710140302204632,
0o3710140302207401,
0o3710140302207411,
0o3710140302264632,
0o3710140312204233,
0o3710140312204632,
0o3710140312207401,
0o3710140312207411,
0o3710140312264632,
0o3710140352304632,
0o3710140352307401,
0o3710140352307411,
0o3710140356104632,
0o3710140356107401,
0o3710140356107411,
0o3710140356171411,
0o3710140356304632,
0o3710140356307401,
0o3710140356307411,
0o3710140372004233,
0o3710140372004632,
0o3710140372007401,
0o3710140372007411]